// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainnode/internal/clients/blockchain/jsonrpc (interfaces: Client,HTTPClient)

// Package jsonrpcmocks is a generated GoMock package.
package jsonrpcmocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	endpoints "github.com/coinbase/chainnode/internal/clients/blockchain/endpoints"
	jsonrpc "github.com/coinbase/chainnode/internal/clients/blockchain/jsonrpc"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BatchCall mocks base method.
func (m *MockClient) BatchCall(arg0 context.Context, arg1 *jsonrpc.RequestMethod, arg2 []jsonrpc.Params) ([]*jsonrpc.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCall", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*jsonrpc.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCall indicates an expected call of BatchCall.
func (mr *MockClientMockRecorder) BatchCall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCall", reflect.TypeOf((*MockClient)(nil).BatchCall), arg0, arg1, arg2)
}

// Call mocks base method.
func (m *MockClient) Call(arg0 context.Context, arg1 *jsonrpc.RequestMethod, arg2 jsonrpc.Params) (*jsonrpc.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2)
	ret0, _ := ret[0].(*jsonrpc.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockClientMockRecorder) Call(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClient)(nil).Call), arg0, arg1, arg2)
}

// GetEndpointProvider mocks base method.
func (m *MockClient) GetEndpointProvider() endpoints.EndpointProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointProvider")
	ret0, _ := ret[0].(endpoints.EndpointProvider)
	return ret0
}

// GetEndpointProvider indicates an expected call of GetEndpointProvider.
func (mr *MockClientMockRecorder) GetEndpointProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointProvider", reflect.TypeOf((*MockClient)(nil).GetEndpointProvider))
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
}
