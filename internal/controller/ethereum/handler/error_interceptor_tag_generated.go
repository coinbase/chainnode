// Code is generated by Template API Generator (TAG). DO NOT EDIT.
package handler

import (
	"context"
	"encoding/json"
)

func (i *errorInterceptor) Call(ctx context.Context, callObject interface{}, blockNumber interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.Call(ctx, callObject, blockNumber)
	})
}
func (i *errorInterceptor) GetBalance(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GetBalance(ctx, address, blockNrOrHash)
	})
}
func (i *errorInterceptor) GetCode(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GetCode(ctx, address, blockNrOrHash)
	})
}
func (i *errorInterceptor) GetTransactionCount(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GetTransactionCount(ctx, address, blockNrOrHash)
	})
}
func (i *errorInterceptor) SendRawTransaction(ctx context.Context, encodedTx interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.SendRawTransaction(ctx, encodedTx)
	})
}
func (i *errorInterceptor) GasPrice(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GasPrice(ctx)
	})
}
func (i *errorInterceptor) GetStorageAt(ctx context.Context, address interface{}, key interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GetStorageAt(ctx, address, key, blockNrOrHash)
	})
}
func (i *errorInterceptor) EstimateGas(ctx context.Context, args interface{}, blockNrOrHash *interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.EstimateGas(ctx, args, blockNrOrHash)
	})
}
func (i *errorInterceptor) ProtocolVersion(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.ProtocolVersion(ctx)
	})
}
func (i *errorInterceptor) FeeHistory(ctx context.Context, blockCount interface{}, lastBlock interface{}, rewardPercentiles interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.FeeHistory(ctx, blockCount, lastBlock, rewardPercentiles)
	})
}
func (i *errorInterceptor) Mining(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.Mining(ctx)
	})
}
func (i *errorInterceptor) Hashrate(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.Hashrate(ctx)
	})
}
func (i *errorInterceptor) Accounts(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.Accounts(ctx)
	})
}
func (i *errorInterceptor) NewFilter(ctx context.Context, criteria interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.NewFilter(ctx, criteria)
	})
}
func (i *errorInterceptor) NewBlockFilter(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.NewBlockFilter(ctx)
	})
}
func (i *errorInterceptor) UninstallFilter(ctx context.Context, id interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.UninstallFilter(ctx, id)
	})
}
func (i *errorInterceptor) GetFilterChanges(ctx context.Context, id interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GetFilterChanges(ctx, id)
	})
}
func (i *errorInterceptor) GetFilterLogs(ctx context.Context, id interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GetFilterLogs(ctx, id)
	})
}
func (i *errorInterceptor) GetWork(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GetWork(ctx)
	})
}
func (i *errorInterceptor) SubmitWork(ctx context.Context, nonce interface{}, hash interface{}, digest interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.SubmitWork(ctx, nonce, hash, digest)
	})
}
func (i *errorInterceptor) SubmitHashrate(ctx context.Context, rate interface{}, id interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.SubmitHashrate(ctx, rate, id)
	})
}
func (i *errorInterceptor) MaxPriorityFeePerGas(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.MaxPriorityFeePerGas(ctx)
	})
}
func (i *errorInterceptor) GetProof(ctx context.Context, address interface{}, storageKeys interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.GetProof(ctx, address, storageKeys, blockNrOrHash)
	})
}
func (i *errorInterceptor) PeerCount(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.PeerCount(ctx)
	})
}
func (i *errorInterceptor) ClientVersion(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(ctx, func(ctx context.Context) (json.RawMessage, error) {
		return i.next.ClientVersion(ctx)
	})
}
