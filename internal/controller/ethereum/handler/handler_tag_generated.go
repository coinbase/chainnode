// Code is generated by Template API Generator (TAG). DO NOT EDIT.
package handler

import (
	"context"
	"encoding/json"
	"time"

	"github.com/coinbase/chainnode/internal/clients/blockchain/jsonrpc"
)

type (
	ProxyReceiver interface {

		// methods from EthNamespace
		Call(ctx context.Context, callObject interface{}, blockNumber interface{}) (json.RawMessage, error)
		GetBalance(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error)
		GetCode(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error)
		GetTransactionCount(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error)
		SendRawTransaction(ctx context.Context, encodedTx interface{}) (json.RawMessage, error)
		GasPrice(ctx context.Context) (json.RawMessage, error)
		GetStorageAt(ctx context.Context, address interface{}, key interface{}, blockNrOrHash interface{}) (json.RawMessage, error)
		EstimateGas(ctx context.Context, args interface{}, blockNrOrHash *interface{}) (json.RawMessage, error)
		ProtocolVersion(ctx context.Context) (json.RawMessage, error)
		FeeHistory(ctx context.Context, blockCount interface{}, lastBlock interface{}, rewardPercentiles interface{}) (json.RawMessage, error)
		Mining(ctx context.Context) (json.RawMessage, error)
		Hashrate(ctx context.Context) (json.RawMessage, error)
		Accounts(ctx context.Context) (json.RawMessage, error)
		NewFilter(ctx context.Context, criteria interface{}) (json.RawMessage, error)
		NewBlockFilter(ctx context.Context) (json.RawMessage, error)
		UninstallFilter(ctx context.Context, id interface{}) (json.RawMessage, error)
		GetFilterChanges(ctx context.Context, id interface{}) (json.RawMessage, error)
		GetFilterLogs(ctx context.Context, id interface{}) (json.RawMessage, error)
		GetWork(ctx context.Context) (json.RawMessage, error)
		SubmitWork(ctx context.Context, nonce interface{}, hash interface{}, digest interface{}) (json.RawMessage, error)
		SubmitHashrate(ctx context.Context, rate interface{}, id interface{}) (json.RawMessage, error)
		MaxPriorityFeePerGas(ctx context.Context) (json.RawMessage, error)
		GetProof(ctx context.Context, address interface{}, storageKeys interface{}, blockNrOrHash interface{}) (json.RawMessage, error)

		// methods from NetNamespace
		PeerCount(ctx context.Context) (json.RawMessage, error)

		// methods from Web3Namespace
		ClientVersion(ctx context.Context) (json.RawMessage, error)
	}
)

var (
	EthCall = &jsonrpc.RequestMethod{
		Name:    "eth_call",
		Timeout: 30 * time.Second,
	}
	EthGetBalance = &jsonrpc.RequestMethod{
		Name:    "eth_getBalance",
		Timeout: 5 * time.Second,
	}
	EthGetCode = &jsonrpc.RequestMethod{
		Name:    "eth_getCode",
		Timeout: 5 * time.Second,
	}
	EthGetTransactionCount = &jsonrpc.RequestMethod{
		Name:    "eth_getTransactionCount",
		Timeout: 5 * time.Second,
	}
	EthSendRawTransaction = &jsonrpc.RequestMethod{
		Name:    "eth_sendRawTransaction",
		Timeout: 5 * time.Second,
	}
	EthGasPrice = &jsonrpc.RequestMethod{
		Name:    "eth_gasPrice",
		Timeout: 5 * time.Second,
	}
	EthGetStorageAt = &jsonrpc.RequestMethod{
		Name:    "eth_getStorageAt",
		Timeout: 5 * time.Second,
	}
	EthEstimateGas = &jsonrpc.RequestMethod{
		Name:    "eth_estimateGas",
		Timeout: 5 * time.Second,
	}
	EthProtocolVersion = &jsonrpc.RequestMethod{
		Name:    "eth_protocolVersion",
		Timeout: 2 * time.Second,
	}
	EthFeeHistory = &jsonrpc.RequestMethod{
		Name:    "eth_feeHistory",
		Timeout: 2 * time.Second,
	}
	EthMining = &jsonrpc.RequestMethod{
		Name:    "eth_mining",
		Timeout: 5 * time.Second,
	}
	EthHashrate = &jsonrpc.RequestMethod{
		Name:    "eth_hashrate",
		Timeout: 5 * time.Second,
	}
	EthAccounts = &jsonrpc.RequestMethod{
		Name:    "eth_accounts",
		Timeout: 5 * time.Second,
	}
	EthNewFilter = &jsonrpc.RequestMethod{
		Name:    "eth_newFilter",
		Timeout: 5 * time.Second,
	}
	EthNewBlockFilter = &jsonrpc.RequestMethod{
		Name:    "eth_newBlockFilter",
		Timeout: 5 * time.Second,
	}
	EthUninstallFilter = &jsonrpc.RequestMethod{
		Name:    "eth_uninstallFilter",
		Timeout: 5 * time.Second,
	}
	EthGetFilterChanges = &jsonrpc.RequestMethod{
		Name:    "eth_getFilterChanges",
		Timeout: 5 * time.Second,
	}
	EthGetFilterLogs = &jsonrpc.RequestMethod{
		Name:    "eth_getFilterLogs",
		Timeout: 5 * time.Second,
	}
	EthGetWork = &jsonrpc.RequestMethod{
		Name:    "eth_getWork",
		Timeout: 5 * time.Second,
	}
	EthSubmitWork = &jsonrpc.RequestMethod{
		Name:    "eth_submitWork",
		Timeout: 5 * time.Second,
	}
	EthSubmitHashrate = &jsonrpc.RequestMethod{
		Name:    "eth_submitHashrate",
		Timeout: 5 * time.Second,
	}
	EthMaxPriorityFeePerGas = &jsonrpc.RequestMethod{
		Name:    "eth_maxPriorityFeePerGas",
		Timeout: 5 * time.Second,
	}
	EthGetProof = &jsonrpc.RequestMethod{
		Name:    "eth_getProof",
		Timeout: 5 * time.Second,
	}
	NetPeerCount = &jsonrpc.RequestMethod{
		Name:    "net_peerCount",
		Timeout: 2 * time.Second,
	}
	Web3ClientVersion = &jsonrpc.RequestMethod{
		Name:    "web3_clientVersion",
		Timeout: 2 * time.Second,
	}
)
var (
	proxyMethods = map[string]bool{
		EthCall.Name:                 true,
		EthGetBalance.Name:           true,
		EthGetCode.Name:              true,
		EthGetTransactionCount.Name:  true,
		EthSendRawTransaction.Name:   true,
		EthGasPrice.Name:             true,
		EthGetStorageAt.Name:         true,
		EthEstimateGas.Name:          true,
		EthProtocolVersion.Name:      true,
		EthFeeHistory.Name:           true,
		EthMining.Name:               true,
		EthHashrate.Name:             true,
		EthAccounts.Name:             true,
		EthNewFilter.Name:            true,
		EthNewBlockFilter.Name:       true,
		EthUninstallFilter.Name:      true,
		EthGetFilterChanges.Name:     true,
		EthGetFilterLogs.Name:        true,
		EthGetWork.Name:              true,
		EthSubmitWork.Name:           true,
		EthSubmitHashrate.Name:       true,
		EthMaxPriorityFeePerGas.Name: true,
		EthGetProof.Name:             true,
		NetPeerCount.Name:            true,
		Web3ClientVersion.Name:       true,
	}
)

//Call implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call
func (r *receiver) Call(ctx context.Context, callObject interface{}, blockNumber interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthCall, jsonrpc.Params{callObject, blockNumber})
}

//GetBalance implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance
func (r *receiver) GetBalance(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthGetBalance, jsonrpc.Params{address, blockNrOrHash})
}

//GetCode implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode
func (r *receiver) GetCode(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthGetCode, jsonrpc.Params{address, blockNrOrHash})
}

//GetTransactionCount implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount
func (r *receiver) GetTransactionCount(ctx context.Context, address interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthGetTransactionCount, jsonrpc.Params{address, blockNrOrHash})
}

//SendRawTransaction implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction
func (r *receiver) SendRawTransaction(ctx context.Context, encodedTx interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthSendRawTransaction, jsonrpc.Params{encodedTx})
}

//GasPrice implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice
func (r *receiver) GasPrice(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthGasPrice, nil)
}

//GetStorageAt implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat
func (r *receiver) GetStorageAt(ctx context.Context, address interface{}, key interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthGetStorageAt, jsonrpc.Params{address, key, blockNrOrHash})
}

//EstimateGas implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas
func (r *receiver) EstimateGas(ctx context.Context, args interface{}, blockNrOrHash *interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthEstimateGas, jsonrpc.Params{args, blockNrOrHash})
}

//ProtocolVersion implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_protocolversion
func (r *receiver) ProtocolVersion(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthProtocolVersion, nil)
}

//FeeHistory implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_feehistory
func (r *receiver) FeeHistory(ctx context.Context, blockCount interface{}, lastBlock interface{}, rewardPercentiles interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthFeeHistory, jsonrpc.Params{blockCount, lastBlock, rewardPercentiles})
}

//Mining implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_mining
func (r *receiver) Mining(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthMining, nil)
}

//Hashrate implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_hashrate
func (r *receiver) Hashrate(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthHashrate, nil)
}

//Accounts implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts
func (r *receiver) Accounts(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthAccounts, nil)
}

//NewFilter implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter
func (r *receiver) NewFilter(ctx context.Context, criteria interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthNewFilter, jsonrpc.Params{criteria})
}

//NewBlockFilter implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newblockfilter
func (r *receiver) NewBlockFilter(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthNewBlockFilter, nil)
}

//UninstallFilter implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallfilter
func (r *receiver) UninstallFilter(ctx context.Context, id interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthUninstallFilter, jsonrpc.Params{id})
}

//GetFilterChanges implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges
func (r *receiver) GetFilterChanges(ctx context.Context, id interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthGetFilterChanges, jsonrpc.Params{id})
}

//GetFilterLogs implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs
func (r *receiver) GetFilterLogs(ctx context.Context, id interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthGetFilterLogs, jsonrpc.Params{id})
}

//GetWork implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getwork
func (r *receiver) GetWork(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthGetWork, nil)
}

//SubmitWork implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_submitwork
func (r *receiver) SubmitWork(ctx context.Context, nonce interface{}, hash interface{}, digest interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthSubmitWork, jsonrpc.Params{nonce, hash, digest})
}

//SubmitHashrate implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_submithashrate
func (r *receiver) SubmitHashrate(ctx context.Context, rate interface{}, id interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthSubmitHashrate, jsonrpc.Params{rate, id})
}

//MaxPriorityFeePerGas implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_maxpriorityfeepergas
func (r *receiver) MaxPriorityFeePerGas(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthMaxPriorityFeePerGas, nil)
}

//GetProof implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getproof
func (r *receiver) GetProof(ctx context.Context, address interface{}, storageKeys interface{}, blockNrOrHash interface{}) (json.RawMessage, error) {
	return r.proxy(ctx, EthGetProof, jsonrpc.Params{address, storageKeys, blockNrOrHash})
}

//PeerCount implements https://ethereum.org/en/developers/docs/apis/json-rpc/#net_peercount
func (r *receiver) PeerCount(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, NetPeerCount, nil)
}

//ClientVersion implements https://ethereum.org/en/developers/docs/apis/json-rpc/#web3_clientversion
func (r *receiver) ClientVersion(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, Web3ClientVersion, nil)
}
