// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainnode/internal/controller/ethereum/handler (interfaces: Receiver)

// Package handlermocks is a generated GoMock package.
package handlermocks

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	handler "github.com/coinbase/chainnode/internal/controller/ethereum/handler"
	rpc "github.com/coinbase/chainnode/internal/server/rpc"
	common "github.com/ethereum/go-ethereum/common"
	tracers "github.com/ethereum/go-ethereum/eth/tracers"
	gomock "github.com/golang/mock/gomock"
)

// MockReceiver is a mock of Receiver interface.
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver.
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance.
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// Accounts mocks base method.
func (m *MockReceiver) Accounts(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts.
func (mr *MockReceiverMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockReceiver)(nil).Accounts), arg0)
}

// Block mocks base method.
func (m *MockReceiver) Block(arg0 context.Context, arg1 rpc.BlockNumber) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockReceiverMockRecorder) Block(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockReceiver)(nil).Block), arg0, arg1)
}

// BlockNumber mocks base method.
func (m *MockReceiver) BlockNumber(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumber", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber.
func (mr *MockReceiverMockRecorder) BlockNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockReceiver)(nil).BlockNumber), arg0)
}

// Call mocks base method.
func (m *MockReceiver) Call(arg0 context.Context, arg1, arg2 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockReceiverMockRecorder) Call(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockReceiver)(nil).Call), arg0, arg1, arg2)
}

// ChainId mocks base method.
func (m *MockReceiver) ChainId(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainId", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainId indicates an expected call of ChainId.
func (mr *MockReceiverMockRecorder) ChainId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainId", reflect.TypeOf((*MockReceiver)(nil).ChainId), arg0)
}

// ClientVersion mocks base method.
func (m *MockReceiver) ClientVersion(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientVersion", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientVersion indicates an expected call of ClientVersion.
func (mr *MockReceiverMockRecorder) ClientVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientVersion", reflect.TypeOf((*MockReceiver)(nil).ClientVersion), arg0)
}

// EstimateGas mocks base method.
func (m *MockReceiver) EstimateGas(arg0 context.Context, arg1 interface{}, arg2 *interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockReceiverMockRecorder) EstimateGas(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockReceiver)(nil).EstimateGas), arg0, arg1, arg2)
}

// FeeHistory mocks base method.
func (m *MockReceiver) FeeHistory(arg0 context.Context, arg1, arg2, arg3 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeHistory indicates an expected call of FeeHistory.
func (mr *MockReceiverMockRecorder) FeeHistory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockReceiver)(nil).FeeHistory), arg0, arg1, arg2, arg3)
}

// GasPrice mocks base method.
func (m *MockReceiver) GasPrice(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasPrice", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GasPrice indicates an expected call of GasPrice.
func (mr *MockReceiverMockRecorder) GasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockReceiver)(nil).GasPrice), arg0)
}

// GetAuthor mocks base method.
func (m *MockReceiver) GetAuthor(arg0 context.Context, arg1 rpc.BlockNumber) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockReceiverMockRecorder) GetAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockReceiver)(nil).GetAuthor), arg0, arg1)
}

// GetBalance mocks base method.
func (m *MockReceiver) GetBalance(arg0 context.Context, arg1, arg2 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockReceiverMockRecorder) GetBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockReceiver)(nil).GetBalance), arg0, arg1, arg2)
}

// GetBlockByHash mocks base method.
func (m *MockReceiver) GetBlockByHash(arg0 context.Context, arg1 common.Hash, arg2 bool) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockReceiverMockRecorder) GetBlockByHash(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockReceiver)(nil).GetBlockByHash), arg0, arg1, arg2)
}

// GetBlockByNumber mocks base method.
func (m *MockReceiver) GetBlockByNumber(arg0 context.Context, arg1 rpc.BlockNumber, arg2 bool) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockReceiverMockRecorder) GetBlockByNumber(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockReceiver)(nil).GetBlockByNumber), arg0, arg1, arg2)
}

// GetBlockTransactionCountByHash mocks base method.
func (m *MockReceiver) GetBlockTransactionCountByHash(arg0 context.Context, arg1 common.Hash) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByHash", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByHash indicates an expected call of GetBlockTransactionCountByHash.
func (mr *MockReceiverMockRecorder) GetBlockTransactionCountByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByHash", reflect.TypeOf((*MockReceiver)(nil).GetBlockTransactionCountByHash), arg0, arg1)
}

// GetBlockTransactionCountByNumber mocks base method.
func (m *MockReceiver) GetBlockTransactionCountByNumber(arg0 context.Context, arg1 rpc.BlockNumber) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByNumber", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByNumber indicates an expected call of GetBlockTransactionCountByNumber.
func (mr *MockReceiverMockRecorder) GetBlockTransactionCountByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByNumber", reflect.TypeOf((*MockReceiver)(nil).GetBlockTransactionCountByNumber), arg0, arg1)
}

// GetCode mocks base method.
func (m *MockReceiver) GetCode(arg0 context.Context, arg1, arg2 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockReceiverMockRecorder) GetCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockReceiver)(nil).GetCode), arg0, arg1, arg2)
}

// GetFilterChanges mocks base method.
func (m *MockReceiver) GetFilterChanges(arg0 context.Context, arg1 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilterChanges", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilterChanges indicates an expected call of GetFilterChanges.
func (mr *MockReceiverMockRecorder) GetFilterChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilterChanges", reflect.TypeOf((*MockReceiver)(nil).GetFilterChanges), arg0, arg1)
}

// GetFilterLogs mocks base method.
func (m *MockReceiver) GetFilterLogs(arg0 context.Context, arg1 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilterLogs", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilterLogs indicates an expected call of GetFilterLogs.
func (mr *MockReceiverMockRecorder) GetFilterLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilterLogs", reflect.TypeOf((*MockReceiver)(nil).GetFilterLogs), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockReceiver) GetLogs(arg0 context.Context, arg1 handler.FilterCriteria) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockReceiverMockRecorder) GetLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockReceiver)(nil).GetLogs), arg0, arg1)
}

// GetProof mocks base method.
func (m *MockReceiver) GetProof(arg0 context.Context, arg1, arg2, arg3 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProof", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProof indicates an expected call of GetProof.
func (mr *MockReceiverMockRecorder) GetProof(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProof", reflect.TypeOf((*MockReceiver)(nil).GetProof), arg0, arg1, arg2, arg3)
}

// GetStorageAt mocks base method.
func (m *MockReceiver) GetStorageAt(arg0 context.Context, arg1, arg2, arg3 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAt indicates an expected call of GetStorageAt.
func (mr *MockReceiverMockRecorder) GetStorageAt(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAt", reflect.TypeOf((*MockReceiver)(nil).GetStorageAt), arg0, arg1, arg2, arg3)
}

// GetTransactionByBlockHashAndIndex mocks base method.
func (m *MockReceiver) GetTransactionByBlockHashAndIndex(arg0 context.Context, arg1 common.Hash, arg2 rpc.DecimalOrHex) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByBlockHashAndIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockHashAndIndex indicates an expected call of GetTransactionByBlockHashAndIndex.
func (mr *MockReceiverMockRecorder) GetTransactionByBlockHashAndIndex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockHashAndIndex", reflect.TypeOf((*MockReceiver)(nil).GetTransactionByBlockHashAndIndex), arg0, arg1, arg2)
}

// GetTransactionByBlockNumberAndIndex mocks base method.
func (m *MockReceiver) GetTransactionByBlockNumberAndIndex(arg0 context.Context, arg1 rpc.BlockNumber, arg2 rpc.DecimalOrHex) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByBlockNumberAndIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockNumberAndIndex indicates an expected call of GetTransactionByBlockNumberAndIndex.
func (mr *MockReceiverMockRecorder) GetTransactionByBlockNumberAndIndex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockReceiver)(nil).GetTransactionByBlockNumberAndIndex), arg0, arg1, arg2)
}

// GetTransactionByHash mocks base method.
func (m *MockReceiver) GetTransactionByHash(arg0 context.Context, arg1 common.Hash) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockReceiverMockRecorder) GetTransactionByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockReceiver)(nil).GetTransactionByHash), arg0, arg1)
}

// GetTransactionCount mocks base method.
func (m *MockReceiver) GetTransactionCount(arg0 context.Context, arg1, arg2 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount.
func (mr *MockReceiverMockRecorder) GetTransactionCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockReceiver)(nil).GetTransactionCount), arg0, arg1, arg2)
}

// GetTransactionReceipt mocks base method.
func (m *MockReceiver) GetTransactionReceipt(arg0 context.Context, arg1 common.Hash) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionReceipt", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt.
func (mr *MockReceiverMockRecorder) GetTransactionReceipt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockReceiver)(nil).GetTransactionReceipt), arg0, arg1)
}

// GetUncleCountByBlockHash mocks base method.
func (m *MockReceiver) GetUncleCountByBlockHash(arg0 context.Context, arg1 common.Hash) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncleCountByBlockHash", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleCountByBlockHash indicates an expected call of GetUncleCountByBlockHash.
func (mr *MockReceiverMockRecorder) GetUncleCountByBlockHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleCountByBlockHash", reflect.TypeOf((*MockReceiver)(nil).GetUncleCountByBlockHash), arg0, arg1)
}

// GetUncleCountByBlockNumber mocks base method.
func (m *MockReceiver) GetUncleCountByBlockNumber(arg0 context.Context, arg1 rpc.BlockNumber) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncleCountByBlockNumber", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleCountByBlockNumber indicates an expected call of GetUncleCountByBlockNumber.
func (mr *MockReceiverMockRecorder) GetUncleCountByBlockNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleCountByBlockNumber", reflect.TypeOf((*MockReceiver)(nil).GetUncleCountByBlockNumber), arg0, arg1)
}

// GetWork mocks base method.
func (m *MockReceiver) GetWork(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWork", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWork indicates an expected call of GetWork.
func (mr *MockReceiverMockRecorder) GetWork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWork", reflect.TypeOf((*MockReceiver)(nil).GetWork), arg0)
}

// Hashrate mocks base method.
func (m *MockReceiver) Hashrate(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashrate", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hashrate indicates an expected call of Hashrate.
func (mr *MockReceiverMockRecorder) Hashrate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashrate", reflect.TypeOf((*MockReceiver)(nil).Hashrate), arg0)
}

// Listening mocks base method.
func (m *MockReceiver) Listening(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listening", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listening indicates an expected call of Listening.
func (mr *MockReceiverMockRecorder) Listening(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listening", reflect.TypeOf((*MockReceiver)(nil).Listening), arg0)
}

// MaxPriorityFeePerGas mocks base method.
func (m *MockReceiver) MaxPriorityFeePerGas(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxPriorityFeePerGas", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxPriorityFeePerGas indicates an expected call of MaxPriorityFeePerGas.
func (mr *MockReceiverMockRecorder) MaxPriorityFeePerGas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPriorityFeePerGas", reflect.TypeOf((*MockReceiver)(nil).MaxPriorityFeePerGas), arg0)
}

// Mining mocks base method.
func (m *MockReceiver) Mining(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mining", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mining indicates an expected call of Mining.
func (mr *MockReceiverMockRecorder) Mining(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mining", reflect.TypeOf((*MockReceiver)(nil).Mining), arg0)
}

// NewBlockFilter mocks base method.
func (m *MockReceiver) NewBlockFilter(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBlockFilter", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewBlockFilter indicates an expected call of NewBlockFilter.
func (mr *MockReceiverMockRecorder) NewBlockFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlockFilter", reflect.TypeOf((*MockReceiver)(nil).NewBlockFilter), arg0)
}

// NewFilter mocks base method.
func (m *MockReceiver) NewFilter(arg0 context.Context, arg1 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFilter", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFilter indicates an expected call of NewFilter.
func (mr *MockReceiverMockRecorder) NewFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFilter", reflect.TypeOf((*MockReceiver)(nil).NewFilter), arg0, arg1)
}

// PeerCount mocks base method.
func (m *MockReceiver) PeerCount(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerCount", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerCount indicates an expected call of PeerCount.
func (mr *MockReceiverMockRecorder) PeerCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerCount", reflect.TypeOf((*MockReceiver)(nil).PeerCount), arg0)
}

// ProtocolVersion mocks base method.
func (m *MockReceiver) ProtocolVersion(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtocolVersion", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtocolVersion indicates an expected call of ProtocolVersion.
func (mr *MockReceiverMockRecorder) ProtocolVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocolVersion", reflect.TypeOf((*MockReceiver)(nil).ProtocolVersion), arg0)
}

// SendRawTransaction mocks base method.
func (m *MockReceiver) SendRawTransaction(arg0 context.Context, arg1 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction.
func (mr *MockReceiverMockRecorder) SendRawTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockReceiver)(nil).SendRawTransaction), arg0, arg1)
}

// SubmitHashrate mocks base method.
func (m *MockReceiver) SubmitHashrate(arg0 context.Context, arg1, arg2 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitHashrate", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitHashrate indicates an expected call of SubmitHashrate.
func (mr *MockReceiverMockRecorder) SubmitHashrate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitHashrate", reflect.TypeOf((*MockReceiver)(nil).SubmitHashrate), arg0, arg1, arg2)
}

// SubmitWork mocks base method.
func (m *MockReceiver) SubmitWork(arg0 context.Context, arg1, arg2, arg3 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitWork", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitWork indicates an expected call of SubmitWork.
func (mr *MockReceiverMockRecorder) SubmitWork(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitWork", reflect.TypeOf((*MockReceiver)(nil).SubmitWork), arg0, arg1, arg2, arg3)
}

// Syncing mocks base method.
func (m *MockReceiver) Syncing(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Syncing", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Syncing indicates an expected call of Syncing.
func (mr *MockReceiverMockRecorder) Syncing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syncing", reflect.TypeOf((*MockReceiver)(nil).Syncing), arg0)
}

// TraceBlockByHash mocks base method.
func (m *MockReceiver) TraceBlockByHash(arg0 context.Context, arg1 common.Hash, arg2 *tracers.TraceConfig) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceBlockByHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceBlockByHash indicates an expected call of TraceBlockByHash.
func (mr *MockReceiverMockRecorder) TraceBlockByHash(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceBlockByHash", reflect.TypeOf((*MockReceiver)(nil).TraceBlockByHash), arg0, arg1, arg2)
}

// TraceBlockByNumber mocks base method.
func (m *MockReceiver) TraceBlockByNumber(arg0 context.Context, arg1 rpc.BlockNumber, arg2 *tracers.TraceConfig) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceBlockByNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceBlockByNumber indicates an expected call of TraceBlockByNumber.
func (mr *MockReceiverMockRecorder) TraceBlockByNumber(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceBlockByNumber", reflect.TypeOf((*MockReceiver)(nil).TraceBlockByNumber), arg0, arg1, arg2)
}

// UninstallFilter mocks base method.
func (m *MockReceiver) UninstallFilter(arg0 context.Context, arg1 interface{}) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallFilter", arg0, arg1)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallFilter indicates an expected call of UninstallFilter.
func (mr *MockReceiverMockRecorder) UninstallFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallFilter", reflect.TypeOf((*MockReceiver)(nil).UninstallFilter), arg0, arg1)
}

// Version mocks base method.
func (m *MockReceiver) Version(arg0 context.Context) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockReceiverMockRecorder) Version(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockReceiver)(nil).Version), arg0)
}
