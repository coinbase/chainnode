// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainnode/internal/controller (interfaces: Checkpointer,Controller,Indexer,Handler,ReverseProxy)

// Package controllermocks is a generated GoMock package.
package controllermocks

import (
	context "context"
	json "encoding/json"
	http "net/http"
	reflect "reflect"

	api "github.com/coinbase/chainnode/internal/api"
	internal "github.com/coinbase/chainnode/internal/controller/internal"
	chainstorage "github.com/coinbase/chainstorage/protos/coinbase/chainstorage"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckpointer is a mock of Checkpointer interface.
type MockCheckpointer struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointerMockRecorder
}

// MockCheckpointerMockRecorder is the mock recorder for MockCheckpointer.
type MockCheckpointerMockRecorder struct {
	mock *MockCheckpointer
}

// NewMockCheckpointer creates a new mock instance.
func NewMockCheckpointer(ctrl *gomock.Controller) *MockCheckpointer {
	mock := &MockCheckpointer{ctrl: ctrl}
	mock.recorder = &MockCheckpointerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointer) EXPECT() *MockCheckpointerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCheckpointer) Get(arg0 context.Context, arg1 api.Collection, arg2 uint32) (*api.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCheckpointerMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCheckpointer)(nil).Get), arg0, arg1, arg2)
}

// GetEarliest mocks base method.
func (m *MockCheckpointer) GetEarliest(arg0 context.Context, arg1 []api.Collection, arg2 uint32) (*api.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarliest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarliest indicates an expected call of GetEarliest.
func (mr *MockCheckpointerMockRecorder) GetEarliest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarliest", reflect.TypeOf((*MockCheckpointer)(nil).GetEarliest), arg0, arg1, arg2)
}

// GetInitialCheckpoint mocks base method.
func (m *MockCheckpointer) GetInitialCheckpoint(arg0 api.Collection, arg1 uint32) *api.Checkpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialCheckpoint", arg0, arg1)
	ret0, _ := ret[0].(*api.Checkpoint)
	return ret0
}

// GetInitialCheckpoint indicates an expected call of GetInitialCheckpoint.
func (mr *MockCheckpointerMockRecorder) GetInitialCheckpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialCheckpoint", reflect.TypeOf((*MockCheckpointer)(nil).GetInitialCheckpoint), arg0, arg1)
}

// Set mocks base method.
func (m *MockCheckpointer) Set(arg0 context.Context, arg1 *api.Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCheckpointerMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCheckpointer)(nil).Set), arg0, arg1)
}

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// Checkpointer mocks base method.
func (m *MockController) Checkpointer() internal.Checkpointer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpointer")
	ret0, _ := ret[0].(internal.Checkpointer)
	return ret0
}

// Checkpointer indicates an expected call of Checkpointer.
func (mr *MockControllerMockRecorder) Checkpointer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpointer", reflect.TypeOf((*MockController)(nil).Checkpointer))
}

// CronTasks mocks base method.
func (m *MockController) CronTasks() []internal.CronTask {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CronTasks")
	ret0, _ := ret[0].([]internal.CronTask)
	return ret0
}

// CronTasks indicates an expected call of CronTasks.
func (mr *MockControllerMockRecorder) CronTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronTasks", reflect.TypeOf((*MockController)(nil).CronTasks))
}

// Handler mocks base method.
func (m *MockController) Handler() internal.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(internal.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockControllerMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockController)(nil).Handler))
}

// Indexer mocks base method.
func (m *MockController) Indexer(arg0 api.Collection) (internal.Indexer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indexer", arg0)
	ret0, _ := ret[0].(internal.Indexer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Indexer indicates an expected call of Indexer.
func (mr *MockControllerMockRecorder) Indexer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indexer", reflect.TypeOf((*MockController)(nil).Indexer), arg0)
}

// ReverseProxies mocks base method.
func (m *MockController) ReverseProxies() []internal.ReverseProxy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseProxies")
	ret0, _ := ret[0].([]internal.ReverseProxy)
	return ret0
}

// ReverseProxies indicates an expected call of ReverseProxies.
func (mr *MockControllerMockRecorder) ReverseProxies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseProxies", reflect.TypeOf((*MockController)(nil).ReverseProxies))
}

// MockIndexer is a mock of Indexer interface.
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer.
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance.
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockIndexer) Index(arg0 context.Context, arg1 uint32, arg2 *chainstorage.BlockchainEvent, arg3 *chainstorage.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockIndexerMockRecorder) Index(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndexer)(nil).Index), arg0, arg1, arg2, arg3)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Namespaces mocks base method.
func (m *MockHandler) Namespaces() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Namespaces indicates an expected call of Namespaces.
func (mr *MockHandlerMockRecorder) Namespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockHandler)(nil).Namespaces))
}

// Path mocks base method.
func (m *MockHandler) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockHandlerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockHandler)(nil).Path))
}

// PrepareContext mocks base method.
func (m *MockHandler) PrepareContext(arg0 context.Context, arg1 json.RawMessage) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockHandlerMockRecorder) PrepareContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockHandler)(nil).PrepareContext), arg0, arg1)
}

// Receiver mocks base method.
func (m *MockHandler) Receiver() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receiver")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Receiver indicates an expected call of Receiver.
func (mr *MockHandlerMockRecorder) Receiver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receiver", reflect.TypeOf((*MockHandler)(nil).Receiver))
}

// MockReverseProxy is a mock of ReverseProxy interface.
type MockReverseProxy struct {
	ctrl     *gomock.Controller
	recorder *MockReverseProxyMockRecorder
}

// MockReverseProxyMockRecorder is the mock recorder for MockReverseProxy.
type MockReverseProxyMockRecorder struct {
	mock *MockReverseProxy
}

// NewMockReverseProxy creates a new mock instance.
func NewMockReverseProxy(ctrl *gomock.Controller) *MockReverseProxy {
	mock := &MockReverseProxy{ctrl: ctrl}
	mock.recorder = &MockReverseProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseProxy) EXPECT() *MockReverseProxyMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockReverseProxy) Handler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockReverseProxyMockRecorder) Handler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockReverseProxy)(nil).Handler))
}

// Path mocks base method.
func (m *MockReverseProxy) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockReverseProxyMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockReverseProxy)(nil).Path))
}

// PrepareContext mocks base method.
func (m *MockReverseProxy) PrepareContext(arg0 context.Context, arg1 json.RawMessage) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockReverseProxyMockRecorder) PrepareContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockReverseProxy)(nil).PrepareContext), arg0, arg1)
}
