// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainnode/internal/storage (interfaces: CheckpointStorage,EthereumStorage)

// Package storagemocks is a generated GoMock package.
package storagemocks

import (
	context "context"
	reflect "reflect"

	api "github.com/coinbase/chainnode/internal/api"
	ethereum "github.com/coinbase/chainnode/internal/api/ethereum"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckpointStorage is a mock of CheckpointStorage interface.
type MockCheckpointStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointStorageMockRecorder
}

// MockCheckpointStorageMockRecorder is the mock recorder for MockCheckpointStorage.
type MockCheckpointStorageMockRecorder struct {
	mock *MockCheckpointStorage
}

// NewMockCheckpointStorage creates a new mock instance.
func NewMockCheckpointStorage(ctrl *gomock.Controller) *MockCheckpointStorage {
	mock := &MockCheckpointStorage{ctrl: ctrl}
	mock.recorder = &MockCheckpointStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointStorage) EXPECT() *MockCheckpointStorageMockRecorder {
	return m.recorder
}

// GetCheckpoint mocks base method.
func (m *MockCheckpointStorage) GetCheckpoint(arg0 context.Context, arg1 api.Collection, arg2 uint32) (*api.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoint", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckpoint indicates an expected call of GetCheckpoint.
func (mr *MockCheckpointStorageMockRecorder) GetCheckpoint(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoint", reflect.TypeOf((*MockCheckpointStorage)(nil).GetCheckpoint), arg0, arg1, arg2)
}

// GetCheckpoints mocks base method.
func (m *MockCheckpointStorage) GetCheckpoints(arg0 context.Context, arg1 []api.Collection, arg2 uint32) ([]*api.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoints", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckpoints indicates an expected call of GetCheckpoints.
func (mr *MockCheckpointStorageMockRecorder) GetCheckpoints(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoints", reflect.TypeOf((*MockCheckpointStorage)(nil).GetCheckpoints), arg0, arg1, arg2)
}

// PersistCheckpoint mocks base method.
func (m *MockCheckpointStorage) PersistCheckpoint(arg0 context.Context, arg1 *api.Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistCheckpoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistCheckpoint indicates an expected call of PersistCheckpoint.
func (mr *MockCheckpointStorageMockRecorder) PersistCheckpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistCheckpoint", reflect.TypeOf((*MockCheckpointStorage)(nil).PersistCheckpoint), arg0, arg1)
}

// MockEthereumStorage is a mock of EthereumStorage interface.
type MockEthereumStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEthereumStorageMockRecorder
}

// MockEthereumStorageMockRecorder is the mock recorder for MockEthereumStorage.
type MockEthereumStorageMockRecorder struct {
	mock *MockEthereumStorage
}

// NewMockEthereumStorage creates a new mock instance.
func NewMockEthereumStorage(ctrl *gomock.Controller) *MockEthereumStorage {
	mock := &MockEthereumStorage{ctrl: ctrl}
	mock.recorder = &MockEthereumStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthereumStorage) EXPECT() *MockEthereumStorageMockRecorder {
	return m.recorder
}

// GetArbtraceBlock mocks base method.
func (m *MockEthereumStorage) GetArbtraceBlock(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 api.Sequence) (*ethereum.Trace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArbtraceBlock", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.Trace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArbtraceBlock indicates an expected call of GetArbtraceBlock.
func (mr *MockEthereumStorageMockRecorder) GetArbtraceBlock(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArbtraceBlock", reflect.TypeOf((*MockEthereumStorage)(nil).GetArbtraceBlock), arg0, arg1, arg2, arg3)
}

// GetBlock mocks base method.
func (m *MockEthereumStorage) GetBlock(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 api.Sequence) (*ethereum.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockEthereumStorageMockRecorder) GetBlock(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockEthereumStorage)(nil).GetBlock), arg0, arg1, arg2, arg3)
}

// GetBlockByHash mocks base method.
func (m *MockEthereumStorage) GetBlockByHash(arg0 context.Context, arg1 uint32, arg2 string, arg3 api.Sequence) (*ethereum.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockEthereumStorageMockRecorder) GetBlockByHash(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockEthereumStorage)(nil).GetBlockByHash), arg0, arg1, arg2, arg3)
}

// GetBlockByHashWithoutFullTx mocks base method.
func (m *MockEthereumStorage) GetBlockByHashWithoutFullTx(arg0 context.Context, arg1 uint32, arg2 string, arg3 api.Sequence) (*ethereum.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHashWithoutFullTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHashWithoutFullTx indicates an expected call of GetBlockByHashWithoutFullTx.
func (mr *MockEthereumStorageMockRecorder) GetBlockByHashWithoutFullTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHashWithoutFullTx", reflect.TypeOf((*MockEthereumStorage)(nil).GetBlockByHashWithoutFullTx), arg0, arg1, arg2, arg3)
}

// GetBlockExtraDataByNumber mocks base method.
func (m *MockEthereumStorage) GetBlockExtraDataByNumber(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 api.Sequence) (*ethereum.BlockExtraData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockExtraDataByNumber", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.BlockExtraData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockExtraDataByNumber indicates an expected call of GetBlockExtraDataByNumber.
func (mr *MockEthereumStorageMockRecorder) GetBlockExtraDataByNumber(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockExtraDataByNumber", reflect.TypeOf((*MockEthereumStorage)(nil).GetBlockExtraDataByNumber), arg0, arg1, arg2, arg3)
}

// GetBlockMetadata mocks base method.
func (m *MockEthereumStorage) GetBlockMetadata(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 api.Sequence) (*ethereum.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockMetadata", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockMetadata indicates an expected call of GetBlockMetadata.
func (mr *MockEthereumStorageMockRecorder) GetBlockMetadata(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockMetadata", reflect.TypeOf((*MockEthereumStorage)(nil).GetBlockMetadata), arg0, arg1, arg2, arg3)
}

// GetLogsLiteByBlockRange mocks base method.
func (m *MockEthereumStorage) GetLogsLiteByBlockRange(arg0 context.Context, arg1 uint32, arg2, arg3 uint64, arg4 api.Sequence) ([]*ethereum.LogsLite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsLiteByBlockRange", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*ethereum.LogsLite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogsLiteByBlockRange indicates an expected call of GetLogsLiteByBlockRange.
func (mr *MockEthereumStorageMockRecorder) GetLogsLiteByBlockRange(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsLiteByBlockRange", reflect.TypeOf((*MockEthereumStorage)(nil).GetLogsLiteByBlockRange), arg0, arg1, arg2, arg3, arg4)
}

// GetLogsV2 mocks base method.
func (m *MockEthereumStorage) GetLogsV2(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 api.Sequence) (*ethereum.Logs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsV2", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.Logs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogsV2 indicates an expected call of GetLogsV2.
func (mr *MockEthereumStorageMockRecorder) GetLogsV2(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsV2", reflect.TypeOf((*MockEthereumStorage)(nil).GetLogsV2), arg0, arg1, arg2, arg3)
}

// GetTraceByHash mocks base method.
func (m *MockEthereumStorage) GetTraceByHash(arg0 context.Context, arg1 uint32, arg2 string, arg3 api.Sequence) (*ethereum.Trace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceByHash", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.Trace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceByHash indicates an expected call of GetTraceByHash.
func (mr *MockEthereumStorageMockRecorder) GetTraceByHash(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceByHash", reflect.TypeOf((*MockEthereumStorage)(nil).GetTraceByHash), arg0, arg1, arg2, arg3)
}

// GetTraceByNumber mocks base method.
func (m *MockEthereumStorage) GetTraceByNumber(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 api.Sequence) (*ethereum.Trace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceByNumber", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.Trace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceByNumber indicates an expected call of GetTraceByNumber.
func (mr *MockEthereumStorageMockRecorder) GetTraceByNumber(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceByNumber", reflect.TypeOf((*MockEthereumStorage)(nil).GetTraceByNumber), arg0, arg1, arg2, arg3)
}

// GetTransactionByHash mocks base method.
func (m *MockEthereumStorage) GetTransactionByHash(arg0 context.Context, arg1 uint32, arg2 string, arg3 api.Sequence) (*ethereum.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockEthereumStorageMockRecorder) GetTransactionByHash(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockEthereumStorage)(nil).GetTransactionByHash), arg0, arg1, arg2, arg3)
}

// GetTransactionReceipt mocks base method.
func (m *MockEthereumStorage) GetTransactionReceipt(arg0 context.Context, arg1 uint32, arg2 string, arg3 api.Sequence) (*ethereum.TransactionReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionReceipt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*ethereum.TransactionReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt.
func (mr *MockEthereumStorageMockRecorder) GetTransactionReceipt(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockEthereumStorage)(nil).GetTransactionReceipt), arg0, arg1, arg2, arg3)
}

// PersistArbtraceBlock mocks base method.
func (m *MockEthereumStorage) PersistArbtraceBlock(arg0 context.Context, arg1 *ethereum.Trace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistArbtraceBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistArbtraceBlock indicates an expected call of PersistArbtraceBlock.
func (mr *MockEthereumStorageMockRecorder) PersistArbtraceBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistArbtraceBlock", reflect.TypeOf((*MockEthereumStorage)(nil).PersistArbtraceBlock), arg0, arg1)
}

// PersistBlock mocks base method.
func (m *MockEthereumStorage) PersistBlock(arg0 context.Context, arg1 *ethereum.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistBlock indicates an expected call of PersistBlock.
func (mr *MockEthereumStorageMockRecorder) PersistBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBlock", reflect.TypeOf((*MockEthereumStorage)(nil).PersistBlock), arg0, arg1)
}

// PersistBlockByHash mocks base method.
func (m *MockEthereumStorage) PersistBlockByHash(arg0 context.Context, arg1 *ethereum.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistBlockByHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistBlockByHash indicates an expected call of PersistBlockByHash.
func (mr *MockEthereumStorageMockRecorder) PersistBlockByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBlockByHash", reflect.TypeOf((*MockEthereumStorage)(nil).PersistBlockByHash), arg0, arg1)
}

// PersistBlockByHashWithoutFullTx mocks base method.
func (m *MockEthereumStorage) PersistBlockByHashWithoutFullTx(arg0 context.Context, arg1 *ethereum.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistBlockByHashWithoutFullTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistBlockByHashWithoutFullTx indicates an expected call of PersistBlockByHashWithoutFullTx.
func (mr *MockEthereumStorageMockRecorder) PersistBlockByHashWithoutFullTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBlockByHashWithoutFullTx", reflect.TypeOf((*MockEthereumStorage)(nil).PersistBlockByHashWithoutFullTx), arg0, arg1)
}

// PersistBlockExtraDataByNumber mocks base method.
func (m *MockEthereumStorage) PersistBlockExtraDataByNumber(arg0 context.Context, arg1 *ethereum.BlockExtraData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistBlockExtraDataByNumber", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistBlockExtraDataByNumber indicates an expected call of PersistBlockExtraDataByNumber.
func (mr *MockEthereumStorageMockRecorder) PersistBlockExtraDataByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBlockExtraDataByNumber", reflect.TypeOf((*MockEthereumStorage)(nil).PersistBlockExtraDataByNumber), arg0, arg1)
}

// PersistLogsV2 mocks base method.
func (m *MockEthereumStorage) PersistLogsV2(arg0 context.Context, arg1 *ethereum.Logs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistLogsV2", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistLogsV2 indicates an expected call of PersistLogsV2.
func (mr *MockEthereumStorageMockRecorder) PersistLogsV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistLogsV2", reflect.TypeOf((*MockEthereumStorage)(nil).PersistLogsV2), arg0, arg1)
}

// PersistTraceByHash mocks base method.
func (m *MockEthereumStorage) PersistTraceByHash(arg0 context.Context, arg1 *ethereum.Trace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistTraceByHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistTraceByHash indicates an expected call of PersistTraceByHash.
func (mr *MockEthereumStorageMockRecorder) PersistTraceByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistTraceByHash", reflect.TypeOf((*MockEthereumStorage)(nil).PersistTraceByHash), arg0, arg1)
}

// PersistTraceByNumber mocks base method.
func (m *MockEthereumStorage) PersistTraceByNumber(arg0 context.Context, arg1 *ethereum.Trace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistTraceByNumber", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistTraceByNumber indicates an expected call of PersistTraceByNumber.
func (mr *MockEthereumStorageMockRecorder) PersistTraceByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistTraceByNumber", reflect.TypeOf((*MockEthereumStorage)(nil).PersistTraceByNumber), arg0, arg1)
}

// PersistTransactionReceipt mocks base method.
func (m *MockEthereumStorage) PersistTransactionReceipt(arg0 context.Context, arg1 *ethereum.TransactionReceipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistTransactionReceipt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistTransactionReceipt indicates an expected call of PersistTransactionReceipt.
func (mr *MockEthereumStorageMockRecorder) PersistTransactionReceipt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistTransactionReceipt", reflect.TypeOf((*MockEthereumStorage)(nil).PersistTransactionReceipt), arg0, arg1)
}

// PersistTransactionReceipts mocks base method.
func (m *MockEthereumStorage) PersistTransactionReceipts(arg0 context.Context, arg1 []*ethereum.TransactionReceipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistTransactionReceipts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistTransactionReceipts indicates an expected call of PersistTransactionReceipts.
func (mr *MockEthereumStorageMockRecorder) PersistTransactionReceipts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistTransactionReceipts", reflect.TypeOf((*MockEthereumStorage)(nil).PersistTransactionReceipts), arg0, arg1)
}

// PersistTransactions mocks base method.
func (m *MockEthereumStorage) PersistTransactions(arg0 context.Context, arg1 []*ethereum.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistTransactions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistTransactions indicates an expected call of PersistTransactions.
func (mr *MockEthereumStorageMockRecorder) PersistTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistTransactions", reflect.TypeOf((*MockEthereumStorage)(nil).PersistTransactions), arg0, arg1)
}
