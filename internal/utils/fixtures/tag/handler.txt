// Code is generated by Template API Generator (TAG). DO NOT EDIT.
package handler

import (
	"context"
	"encoding/json"
	"time"

	"github.com/coinbase/chainnode/internal/clients/blockchain/jsonrpc"
)

type (
	ProxyReceiver interface {

		// methods from EthNamespace
		Foo(ctx context.Context) (json.RawMessage, error)

		// methods from Web3Namespace
		Boo(ctx context.Context, paramOne typeOne, paramTwo typeTwo) (json.RawMessage, error)
	}
)

var (
	EthFoo = &jsonrpc.RequestMethod{
		Name:    "eth_foo",
		Timeout: 2 * time.Second,
	}
	Web3Boo = &jsonrpc.RequestMethod{
		Name:    "web3_boo",
		Timeout: 5 * time.Second,
	}
)
var (
	proxyMethods = map[string]bool{
		EthFoo.Name:  true,
		Web3Boo.Name: true,
	}
)

//Foo implements https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_foo
func (r *receiver) Foo(ctx context.Context) (json.RawMessage, error) {
	return r.proxy(ctx, EthFoo, nil)
}

//Boo implements https://ethereum.org/en/developers/docs/apis/json-rpc/#web3_boo
func (r *receiver) Boo(ctx context.Context, paramOne typeOne, paramTwo typeTwo) (json.RawMessage, error) {
	return r.proxy(ctx, Web3Boo, jsonrpc.Params{paramOne, paramTwo})
}
