// Code is generated by Template API Generator (TAG). DO NOT EDIT.
package handler

import (
	"context"
	"encoding/json"

	"github.com/uber-go/tally/v4"
	"go.uber.org/zap"

	"github.com/coinbase/chainnode/internal/clients/blockchain/jsonrpc"
	"github.com/coinbase/chainnode/internal/utils/instrument"
)

type (
	proxyMetrics struct {
		instrumentFoo instrument.Call
		instrumentBoo instrument.Call
	}
)

func newProxyMetrics(scope tally.Scope, logger *zap.Logger) *proxyMetrics {
	scope = scope.SubScope(handlerScopeName)
	return &proxyMetrics{
		instrumentFoo: newInstrument(EthFoo, scope, logger, filterProxyError),
		instrumentBoo: newInstrument(Web3Boo, scope, logger, filterProxyError),
	}
}
func (i *instrumentInterceptor) Foo(ctx context.Context) (json.RawMessage, error) {
	return i.intercept(
		ctx,
		i.proxyMetrics.instrumentFoo,
		func(ctx context.Context) (json.RawMessage, error) {
			return i.next.Foo(ctx)
		},
		nil,
	)
}
func (i *instrumentInterceptor) Boo(ctx context.Context, paramOne typeOne, paramTwo typeTwo) (json.RawMessage, error) {
	return i.intercept(
		ctx,
		i.proxyMetrics.instrumentBoo,
		func(ctx context.Context) (json.RawMessage, error) {
			return i.next.Boo(ctx, paramOne, paramTwo)
		},
		jsonrpc.Params{paramOne, paramTwo},
	)
}
